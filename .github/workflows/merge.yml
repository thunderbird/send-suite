---
name: deploy-staging-and-create-release

concurrency:
  group: deploy-staging
  cancel-in-progress: true

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
    outputs:
      backend-changed: ${{ steps.check.outputs.backend-changed }}
      iac-changed: ${{ steps.check.outputs.iac-changed }}
      frontend-changed: ${{ steps.check.outputs.frontend-changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: dorny/paths-filter@v3
        id: check
        with:
          filters: |
            backend-changed:
              - 'backend/**'
            iac-changed:
              - 'pulumi/**'
              - '.github/workflows/validate.yml'
            frontend-changed:
              - 'frontend/**'

  # When backend changes are merged in, build and push a new Docker image
  backend-merge:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
    steps:
      # Preparation for future steps
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set up virtual environment
        shell: bash
        run: |
          python -m pip install virtualenv
          cd pulumi
          virtualenv ./venv

      - name: Set up Pulumi environment
        id: pulumi-env
        shell: bash
        run: |
          cd pulumi
          source ./venv/bin/activate
          curl -fsSL https://get.pulumi.com | sh
          pip install -Ur requirements.txt

      # Produce a container image
      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend
        env:
          ECR_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ vars.PROJECT }}:${{ github.sha }}"
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_TAG ./backend
          docker push $ECR_TAG
          echo "backend-image=$ECR_TAG" >> $GITHUB_OUTPUT
          echo -n "$ECR_TAG" > ecr_tag.txt

      - name: Archive the ECR tag
        id: tag-archive
        uses: actions/upload-artifact@v4
        with:
          name: ecr_tag
          path: ecr_tag.txt

      # Deploy to staging
      - name: Deploy new image to staging
        shell: bash
        env:
          ECR_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ vars.PROJECT }}:${{ github.sha }}"
        run: |
          # Update the PATH to include the right version of Pulumi; this is non-trivial or impossible
          # to do with the GHA workflow "env" settings above.
          export PATH="/home/runner/.pulumi/bin:$PATH"

          cd pulumi

          # Create a YAML config stump containing only the nested tree leading to the image tag update
          cat << EOF > newimage.yaml
          resources:
            tb:fargate:FargateClusterWithLogging:
              backend:
                task_definition:
                  container_definitions:
                    backend:
                      image: "$ECR_TAG"
          EOF

          # Use yq to merge the stump into the main config
          yq -i '. *= load("newimage.yaml")' config.staging.yaml

          # Set up the Pulumi environment and update the service
          export PULUMI_CONFIG_PASSPHRASE="${{ secrets.PULUMI_PASSPHRASE_STAGING }}"
          source ./venv/bin/activate
          pulumi login s3://tb-send-suite-pulumi
          pulumi stack select staging
          pulumi up -y --diff --target \
            'urn:pulumi:staging::send-suite::tb:fargate:FargateClusterWithLogging$aws:ecs/taskDefinition:TaskDefinition::send-suite-staging-fargate-taskdef' \
            --target-dependents

  frontend-merge:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
    steps:
      # Preparation for future steps
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Staging build steps
      - name: Create staging .env file from secrets
        shell: bash
        run: |
          cd frontend
          cat << EOF > .env
          VUE_BASE_URL=https://send.thunderbird.dev
          VITE_SEND_SERVER_URL=https://lockbox.thunderbird.dev
          VITE_SEND_CLIENT_URL=https://send.thunderbird.dev
          VITE_SENTRY_AUTH_TOKEN=${{ secrets.VITE_SENTRY_AUTH_TOKEN_STAGING }}
          VITE_SENTRY_DSN=${{ vars.VITE_SENTRY_DSN_STAGING }}
          VITE_POSTHOG_PROJECT_KEY=${{ secrets.VITE_POSTHOG_PROJECT_KEY_STAGING }}
          VITE_POSTHOG_HOST=${{ vars.VITE_POSTHOG_HOST_STAGING }}
          EOF

      - name: Build the staging frontend's static assets
        id: frontend-build-staging
        env:
          BASE_URL: https://send.thunderbird.dev
        shell: bash
        run: |
          # Initial setup of dependencies
          pushd frontend
          npm install -g pnpm
          pnpm install

          # Build static frontend assets and the .xpi
          IS_CI_AUTOMATION=yes pnpm build-and-submit
          mv dist-web ../dist-web-staging
          popd
          mv frontend-source frontend-source-staging
          mv frontend-source.zip frontend-source-staging.zip

      - name: Archive the staging frontend build
        id: frontend-archive-staging
        uses: actions/upload-artifact@v4
        with:
          name: dist-web-staging
          path: dist-web-staging
          compression-level: 0

      - name: Archive the staging XPI
        id: xpi-archive-staging
        uses: actions/upload-artifact@v4
        with:
          name: xpi-staging
          path: send-suite-*.xpi

      # Production build steps
      - name: Create production .env file from secrets
        shell: bash
        run: |
          cd frontend
          cat << EOF > .env
          VUE_BASE_URL=https://send.tb.pro
          VITE_SEND_SERVER_URL=https://send-backend.tb.pro
          VITE_SEND_CLIENT_URL=https://send.tb.pro
          VITE_SENTRY_AUTH_TOKEN=${{ secrets.VITE_SENTRY_AUTH_TOKEN_PROD }}
          VITE_SENTRY_DSN=${{ vars.VITE_SENTRY_DSN_PROD }}
          VITE_POSTHOG_PROJECT_KEY=${{ secrets.VITE_POSTHOG_PROJECT_KEY_PROD }}
          VITE_POSTHOG_HOST=${{ vars.VITE_POSTHOG_HOST_PROD }}
          EOF

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Build the production frontend's static assets
        id: frontend-build-prod
        shell: bash
        env:
          BASE_URL: https://send.tb.pro
        run: |
          # Initial setup of dependencies
          pushd frontend
          npm install -g pnpm
          pnpm install

          # Build static frontend assets and the .xpi
          IS_CI_AUTOMATION=yes pnpm build-and-submit
          mv dist-web ../dist-web-prod
          popd
          mv frontend-source frontend-source-prod
          mv frontend-source.zip frontend-source-prod.zip
          mv "$(find send-suite-*.xpi)" "send-suite-prod-$(basename "$(find send-suite-*.xpi)" | cut -d'-' -f3-)"

      - name: Archive the production frontend build
        id: frontend-archive-prod
        uses: actions/upload-artifact@v4
        with:
          name: dist-web-prod
          path: dist-web-prod

      - name: Archive the prod XPI
        id: xpi-archive-prod
        uses: actions/upload-artifact@v4
        with:
          name: xpi-prod
          path: send-suite-prod-*.xpi

      - name: Deploy to staging
        id: frontend-deploy
        shell: bash
        run: |
          cd dist-web-staging
          aws s3 cp . s3://tb-send-suite-staging-frontend/ --recursive

          # Invalidate the CDN
          aws cloudfront create-invalidation --distribution-id ${{ vars.STAGING_CF_DISTRO_ID }} --paths "/*"

      - name: Deploy to ATN
        id: xpi-deploy
        shell: bash
        env:
          ATN_API_KEY: "${{ secrets.ATN_API_KEY }}"
          ATN_API_SECRET: "${{ secrets.ATN_API_SECRET }}"
          BASE_URL: https://send.thunderbird.dev/
        run: |
          cd frontend
          pnpm deploy-xpi $(find .. -name 'send-suite-*.xpi')
