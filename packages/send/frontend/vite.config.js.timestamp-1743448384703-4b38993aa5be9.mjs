// vite.config.js
import { sentryVitePlugin } from "file:///Users/alejandro/WebApps/send-suite-repo/send-suite/node_modules/.pnpm/@sentry+vite-plugin@2.23.0_encoding@0.1.13/node_modules/@sentry/vite-plugin/dist/esm/index.mjs";
import vue from "file:///Users/alejandro/WebApps/send-suite-repo/send-suite/node_modules/.pnpm/@vitejs+plugin-vue@4.6.2_vite@5.4.14_@types+node@22.13.11__vue@3.5.13_typescript@5.8.2_/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import path2 from "path";
import { defineConfig, loadEnv } from "file:///Users/alejandro/WebApps/send-suite-repo/send-suite/node_modules/.pnpm/vite@5.4.14_@types+node@22.13.11/node_modules/vite/dist/node/index.js";

// sharedViteConfig.ts
import fs from "fs";
import path from "path";
var __vite_injected_original_dirname = "/Users/alejandro/WebApps/send-suite-repo/send-suite/packages/send/frontend";
var packageJson = JSON.parse(
  fs.readFileSync(path.resolve(__vite_injected_original_dirname, "./package.json"), "utf8")
);
var sharedViteConfig = {
  define: {
    __APP_VERSION__: JSON.stringify(packageJson.version)
  }
};

// src/lib/config.ts
var getIsEnvProd = (envVarObject) => {
  return envVarObject?.BASE_URL?.includes("https://send.tb.pro");
};
var getEnvironmentName = (envVarObject) => {
  if (!envVarObject) {
    throw new Error("Environment variables object is required");
  }
  if ((envVarObject.NODE_ENV || envVarObject.MODE) === "development") {
    return "development";
  }
  if (getIsEnvProd(envVarObject)) {
    return "production";
  }
  return "staging";
};

// vite.config.js
var __vite_injected_original_dirname2 = "/Users/alejandro/WebApps/send-suite-repo/send-suite/packages/send/frontend";
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd());
  const SERVER_BASE_URLS = {
    // backend is the docker network name by default
    development: "http://backend:8080",
    production: env.VITE_SEND_SERVER_URL
  };
  const SERVER_BASE_URL = SERVER_BASE_URLS[mode];
  return {
    ...sharedViteConfig,
    plugins: [
      vue(),
      sentryVitePlugin({
        org: "thunderbird",
        project: "send-suite-frontend",
        authToken: env.VITE_SENTRY_AUTH_TOKEN,
        release: packageJson.version,
        moduleMetadata: {
          version: packageJson.version,
          environment: getEnvironmentName(env)
        }
      })
    ],
    server: {
      // `https: true` gives `Error code: SSL_ERROR_NO_CYPHER_OVERLAP`
      // https: true,
      proxy: {
        // `secure: false` seems to do nothing
        // secure: false,
        "/lockbox/fxa": SERVER_BASE_URL,
        // Using `backend` per the docker network name
        "/login-success.html": SERVER_BASE_URL,
        // Using `backend` per the docker network name
        "/login-failed.html": SERVER_BASE_URL
        // Using `backend` per the docker network name
      }
    },
    resolve: {
      alias: {
        "@": path2.resolve(__vite_injected_original_dirname2, "src")
      }
    },
    build: {
      outDir: "dist-web",
      sourcemap: true
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAic2hhcmVkVml0ZUNvbmZpZy50cyIsICJzcmMvbGliL2NvbmZpZy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9hbGVqYW5kcm8vV2ViQXBwcy9zZW5kLXN1aXRlLXJlcG8vc2VuZC1zdWl0ZS9wYWNrYWdlcy9zZW5kL2Zyb250ZW5kXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvYWxlamFuZHJvL1dlYkFwcHMvc2VuZC1zdWl0ZS1yZXBvL3NlbmQtc3VpdGUvcGFja2FnZXMvc2VuZC9mcm9udGVuZC92aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYWxlamFuZHJvL1dlYkFwcHMvc2VuZC1zdWl0ZS1yZXBvL3NlbmQtc3VpdGUvcGFja2FnZXMvc2VuZC9mcm9udGVuZC92aXRlLmNvbmZpZy5qc1wiO2ltcG9ydCB7IHNlbnRyeVZpdGVQbHVnaW4gfSBmcm9tICdAc2VudHJ5L3ZpdGUtcGx1Z2luJztcbmltcG9ydCB2dWUgZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBsb2FkRW52IH0gZnJvbSAndml0ZSc7XG5pbXBvcnQgeyBwYWNrYWdlSnNvbiwgc2hhcmVkVml0ZUNvbmZpZyB9IGZyb20gJy4vc2hhcmVkVml0ZUNvbmZpZyc7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudE5hbWUgfSBmcm9tICcuL3NyYy9saWIvY29uZmlnJztcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+IHtcbiAgY29uc3QgZW52ID0gbG9hZEVudihtb2RlLCBwcm9jZXNzLmN3ZCgpKTtcblxuICBjb25zdCBTRVJWRVJfQkFTRV9VUkxTID0ge1xuICAgIC8vIGJhY2tlbmQgaXMgdGhlIGRvY2tlciBuZXR3b3JrIG5hbWUgYnkgZGVmYXVsdFxuICAgIGRldmVsb3BtZW50OiAnaHR0cDovL2JhY2tlbmQ6ODA4MCcsXG4gICAgcHJvZHVjdGlvbjogZW52LlZJVEVfU0VORF9TRVJWRVJfVVJMLFxuICB9O1xuXG4gIGNvbnN0IFNFUlZFUl9CQVNFX1VSTCA9IFNFUlZFUl9CQVNFX1VSTFNbbW9kZV07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zaGFyZWRWaXRlQ29uZmlnLFxuICAgIHBsdWdpbnM6IFtcbiAgICAgIHZ1ZSgpLFxuICAgICAgc2VudHJ5Vml0ZVBsdWdpbih7XG4gICAgICAgIG9yZzogJ3RodW5kZXJiaXJkJyxcbiAgICAgICAgcHJvamVjdDogJ3NlbmQtc3VpdGUtZnJvbnRlbmQnLFxuICAgICAgICBhdXRoVG9rZW46IGVudi5WSVRFX1NFTlRSWV9BVVRIX1RPS0VOLFxuICAgICAgICByZWxlYXNlOiBwYWNrYWdlSnNvbi52ZXJzaW9uLFxuICAgICAgICBtb2R1bGVNZXRhZGF0YToge1xuICAgICAgICAgIHZlcnNpb246IHBhY2thZ2VKc29uLnZlcnNpb24sXG4gICAgICAgICAgZW52aXJvbm1lbnQ6IGdldEVudmlyb25tZW50TmFtZShlbnYpLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgXSxcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIC8vIGBodHRwczogdHJ1ZWAgZ2l2ZXMgYEVycm9yIGNvZGU6IFNTTF9FUlJPUl9OT19DWVBIRVJfT1ZFUkxBUGBcbiAgICAgIC8vIGh0dHBzOiB0cnVlLFxuICAgICAgcHJveHk6IHtcbiAgICAgICAgLy8gYHNlY3VyZTogZmFsc2VgIHNlZW1zIHRvIGRvIG5vdGhpbmdcbiAgICAgICAgLy8gc2VjdXJlOiBmYWxzZSxcbiAgICAgICAgJy9sb2NrYm94L2Z4YSc6IFNFUlZFUl9CQVNFX1VSTCwgLy8gVXNpbmcgYGJhY2tlbmRgIHBlciB0aGUgZG9ja2VyIG5ldHdvcmsgbmFtZVxuICAgICAgICAnL2xvZ2luLXN1Y2Nlc3MuaHRtbCc6IFNFUlZFUl9CQVNFX1VSTCwgLy8gVXNpbmcgYGJhY2tlbmRgIHBlciB0aGUgZG9ja2VyIG5ldHdvcmsgbmFtZVxuICAgICAgICAnL2xvZ2luLWZhaWxlZC5odG1sJzogU0VSVkVSX0JBU0VfVVJMLCAvLyBVc2luZyBgYmFja2VuZGAgcGVyIHRoZSBkb2NrZXIgbmV0d29yayBuYW1lXG4gICAgICB9LFxuICAgIH0sXG4gICAgcmVzb2x2ZToge1xuICAgICAgYWxpYXM6IHtcbiAgICAgICAgJ0AnOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnc3JjJyksXG4gICAgICB9LFxuICAgIH0sXG4gICAgYnVpbGQ6IHtcbiAgICAgIG91dERpcjogJ2Rpc3Qtd2ViJyxcbiAgICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICB9LFxuICB9O1xufSk7XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIi9Vc2Vycy9hbGVqYW5kcm8vV2ViQXBwcy9zZW5kLXN1aXRlLXJlcG8vc2VuZC1zdWl0ZS9wYWNrYWdlcy9zZW5kL2Zyb250ZW5kXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvYWxlamFuZHJvL1dlYkFwcHMvc2VuZC1zdWl0ZS1yZXBvL3NlbmQtc3VpdGUvcGFja2FnZXMvc2VuZC9mcm9udGVuZC9zaGFyZWRWaXRlQ29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9hbGVqYW5kcm8vV2ViQXBwcy9zZW5kLXN1aXRlLXJlcG8vc2VuZC1zdWl0ZS9wYWNrYWdlcy9zZW5kL2Zyb250ZW5kL3NoYXJlZFZpdGVDb25maWcudHNcIjtpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBVc2VyQ29uZmlnIH0gZnJvbSAndml0ZSc7XG5cbmV4cG9ydCBjb25zdCBwYWNrYWdlSnNvbiA9IEpTT04ucGFyc2UoXG4gIGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi9wYWNrYWdlLmpzb24nKSwgJ3V0ZjgnKVxuKTtcblxuZXhwb3J0IGNvbnN0IHNoYXJlZFZpdGVDb25maWc6IFVzZXJDb25maWcgPSB7XG4gIGRlZmluZToge1xuICAgIF9fQVBQX1ZFUlNJT05fXzogSlNPTi5zdHJpbmdpZnkocGFja2FnZUpzb24udmVyc2lvbiksXG4gIH0sXG59O1xuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvYWxlamFuZHJvL1dlYkFwcHMvc2VuZC1zdWl0ZS1yZXBvL3NlbmQtc3VpdGUvcGFja2FnZXMvc2VuZC9mcm9udGVuZC9zcmMvbGliXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvYWxlamFuZHJvL1dlYkFwcHMvc2VuZC1zdWl0ZS1yZXBvL3NlbmQtc3VpdGUvcGFja2FnZXMvc2VuZC9mcm9udGVuZC9zcmMvbGliL2NvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYWxlamFuZHJvL1dlYkFwcHMvc2VuZC1zdWl0ZS1yZXBvL3NlbmQtc3VpdGUvcGFja2FnZXMvc2VuZC9mcm9udGVuZC9zcmMvbGliL2NvbmZpZy50c1wiO2V4cG9ydCB0eXBlIEVudmlyb25tZW50ID0gJ2RldmVsb3BtZW50JyB8ICdzdGFnaW5nJyB8ICdwcm9kdWN0aW9uJztcblxuZXhwb3J0IGNvbnN0IGdldElzRW52UHJvZCA9IChlbnZWYXJPYmplY3Q6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHtcbiAgcmV0dXJuIGVudlZhck9iamVjdD8uQkFTRV9VUkw/LmluY2x1ZGVzKCdodHRwczovL3NlbmQudGIucHJvJyk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZW52aXJvbm1lbnQgaXMgcHJvZHVjdGlvblxuICogQHBhcmFtIGVudlZhck9iamVjdCAtIE9iamVjdCBjb250YWluaW5nIGVudmlyb25tZW50IHZhcmlhYmxlcy4gWW91IGNhbiB1c2UgcHJvY2VzLmVudiBvciBpbXBvcnQubWV0YS5lbnYsIGlmIGV4ZWN1dGVkIGZyb20gdml0ZS5jb25maWcsIHVzZSBlbnYgdGhhdCBjb21lcyBmcm9tIGxvYWRFbnZcbiAqIEByZXR1cm5zIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBlbnZpcm9ubWVudCBpcyBwcm9kdWN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRFbnZpcm9ubWVudE5hbWUgPSAoXG4gIGVudlZhck9iamVjdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuKTogRW52aXJvbm1lbnQgPT4ge1xuICBpZiAoIWVudlZhck9iamVjdCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRW52aXJvbm1lbnQgdmFyaWFibGVzIG9iamVjdCBpcyByZXF1aXJlZCcpO1xuICB9XG4gIC8vIERldmVsb3BtZW50IGlzIHdoZW4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgaXMgbm90IHNldCBvciBzZXQgdG8gJ2RldmVsb3BtZW50J1xuICBpZiAoKGVudlZhck9iamVjdC5OT0RFX0VOViB8fCBlbnZWYXJPYmplY3QuTU9ERSkgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICByZXR1cm4gJ2RldmVsb3BtZW50JztcbiAgfVxuICAvLyBQcm9kdWN0aW9uIGlzIHdoZW4gQkFTRV9VUkwgaXMgc2V0IHRvICd0Yi5wcm8nXG4gIGlmIChnZXRJc0VudlByb2QoZW52VmFyT2JqZWN0KSkge1xuICAgIHJldHVybiAncHJvZHVjdGlvbic7XG4gIH1cbiAgLy8gU3RhZ2luZyBpcyB3aGVuIEJBU0VfVVJMIGlzIHNldCB0byAndGh1bmRlcmJpcmQuZGV2J1xuICByZXR1cm4gJ3N0YWdpbmcnO1xufTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZ1osU0FBUyx3QkFBd0I7QUFDamIsT0FBTyxTQUFTO0FBQ2hCLE9BQU9BLFdBQVU7QUFDakIsU0FBUyxjQUFjLGVBQWU7OztBQ0hvWCxPQUFPLFFBQVE7QUFDemEsT0FBTyxVQUFVO0FBRGpCLElBQU0sbUNBQW1DO0FBSWxDLElBQU0sY0FBYyxLQUFLO0FBQUEsRUFDOUIsR0FBRyxhQUFhLEtBQUssUUFBUSxrQ0FBVyxnQkFBZ0IsR0FBRyxNQUFNO0FBQ25FO0FBRU8sSUFBTSxtQkFBK0I7QUFBQSxFQUMxQyxRQUFRO0FBQUEsSUFDTixpQkFBaUIsS0FBSyxVQUFVLFlBQVksT0FBTztBQUFBLEVBQ3JEO0FBQ0Y7OztBQ1ZPLElBQU0sZUFBZSxDQUFDLGlCQUF5QztBQUNwRSxTQUFPLGNBQWMsVUFBVSxTQUFTLHFCQUFxQjtBQUMvRDtBQU9PLElBQU0scUJBQXFCLENBQ2hDLGlCQUNnQjtBQUNoQixNQUFJLENBQUMsY0FBYztBQUNqQixVQUFNLElBQUksTUFBTSwwQ0FBMEM7QUFBQSxFQUM1RDtBQUVBLE9BQUssYUFBYSxZQUFZLGFBQWEsVUFBVSxlQUFlO0FBQ2xFLFdBQU87QUFBQSxFQUNUO0FBRUEsTUFBSSxhQUFhLFlBQVksR0FBRztBQUM5QixXQUFPO0FBQUEsRUFDVDtBQUVBLFNBQU87QUFDVDs7O0FGM0JBLElBQU1DLG9DQUFtQztBQVF6QyxJQUFPLHNCQUFRLGFBQWEsQ0FBQyxFQUFFLEtBQUssTUFBTTtBQUN4QyxRQUFNLE1BQU0sUUFBUSxNQUFNLFFBQVEsSUFBSSxDQUFDO0FBRXZDLFFBQU0sbUJBQW1CO0FBQUE7QUFBQSxJQUV2QixhQUFhO0FBQUEsSUFDYixZQUFZLElBQUk7QUFBQSxFQUNsQjtBQUVBLFFBQU0sa0JBQWtCLGlCQUFpQixJQUFJO0FBRTdDLFNBQU87QUFBQSxJQUNMLEdBQUc7QUFBQSxJQUNILFNBQVM7QUFBQSxNQUNQLElBQUk7QUFBQSxNQUNKLGlCQUFpQjtBQUFBLFFBQ2YsS0FBSztBQUFBLFFBQ0wsU0FBUztBQUFBLFFBQ1QsV0FBVyxJQUFJO0FBQUEsUUFDZixTQUFTLFlBQVk7QUFBQSxRQUNyQixnQkFBZ0I7QUFBQSxVQUNkLFNBQVMsWUFBWTtBQUFBLFVBQ3JCLGFBQWEsbUJBQW1CLEdBQUc7QUFBQSxRQUNyQztBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUNBLFFBQVE7QUFBQTtBQUFBO0FBQUEsTUFHTixPQUFPO0FBQUE7QUFBQTtBQUFBLFFBR0wsZ0JBQWdCO0FBQUE7QUFBQSxRQUNoQix1QkFBdUI7QUFBQTtBQUFBLFFBQ3ZCLHNCQUFzQjtBQUFBO0FBQUEsTUFDeEI7QUFBQSxJQUNGO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDUCxPQUFPO0FBQUEsUUFDTCxLQUFLQyxNQUFLLFFBQVFDLG1DQUFXLEtBQUs7QUFBQSxNQUNwQztBQUFBLElBQ0Y7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUNMLFFBQVE7QUFBQSxNQUNSLFdBQVc7QUFBQSxJQUNiO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbInBhdGgiLCAiX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUiLCAicGF0aCIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSJdCn0K
