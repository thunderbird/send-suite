// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTier {
  PRO
  EPHEMERAL
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String?        @unique
  publicKey           String
  // links            Link[]
  uploads             Upload[]
  groups              GroupUser[]
  containers          Container[]
  sentInvitations     Invitation[]    @relation("Sender")
  receivedInvitations Invitation[]    @relation("Recipient")
  ephemeralLinks      EphemeralLink[] @relation("Ephemeral")
  tier                UserTier
  createdAt           DateTime?
  updatedAt           DateTime?
  activatedAt         DateTime?
}

model Group {
  id          Int     @id @default(autoincrement())
  members     GroupUser[]
  container   Container?
}

model GroupUser {
  groupId Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId  Int
  user    User  @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model Invitation {
  id              Int     @id @default(autoincrement())
  senderId        Int
  sender          User    @relation("Sender", fields: [senderId], references: [id])
  recipientId     Int
  recipient       User    @relation("Recipient", fields: [recipientId], references: [id])
  wrappedKey      String
  containerId     Int
}

model EphemeralLink {
  id                  String @unique
  containerId         Int
  wrappedKey          String
  salt                String
  challengeKey        String
  challengeSalt       String
  senderId            Int
  sender              User    @relation("Ephemeral", fields: [senderId], references: [id])
  challengeCiphertext String
  challengePlaintext  String
}

enum ContainerType {
  CONVERSATION
  FOLDER
}

model Container {
  id        Int             @id @default(autoincrement())
  name      String
  // publicKey String
  ownerId   Int
  owner     User            @relation(fields: [ownerId], references: [id])
  groupId   Int             @unique
  group     Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  items     Item[]
  parentId  Int?
  parent    Container?      @relation("Nesting", fields: [parentId], references: [id])
  children  Container[]     @relation("Nesting")
  createdAt DateTime?
  updatedAt DateTime?
  type      ContainerType
  // unique container names in the same parent
  @@unique([name, parentId])
}

// model GroupFolder {
//   groupId   Int
//   group     Group @relation(fields: [groupId], references: [id])
//   folderId  Int
//   folder    Folder  @relation(fields: [folderId], references: [id])

//   @@id([groupId, folderId])
// }

enum ItemType {
  MESSAGE
  FILE
}
model Item {
  id            Int           @id @default(autoincrement())
  name          String
  wrappedKey    String
  containerId   Int
  container     Container     @relation(fields: [containerId], references: [id], onDelete: Cascade)
  uploadId      String
  // Do not cascade, since uploads can exist in different Containers as 
  // different Items
  upload        Upload          @relation(fields: [uploadId], references: [id] )
  type          ItemType
  createdAt     DateTime?
  // unique "file names" in a container
  @@unique([name, containerId])

  // You could make threads by uncommenting the following:
  // parentId  Int?
  // parent    Item?      @relation("Nesting", fields: [parentId], references: [id])
  // children  Item[]     @relation("Nesting")
}

// This is how we facilitate links to encrypted items
// A dummy user is created who has access to an individual file
// one problem: folders have keys, not items
// and we want the user to be able to share anything that already exists
// in their lockbox to users and non-users...
// options:
// - create a "virtual/invisible" subfolder and make it so an Item can be in multiple containers
//    - the dummy user gets access to the invisible folder, not the parent
//    - or, we create a copy of the folder (db entity), copy the key, and copy the item
//    - that way, there's no way to determine where original folder/item are in order to try to use the key
// model ItemLink {
//   id              Int           @id @default(autoincrement())
//   hash            String
//   expiresAt       DateTime?
//   downloadLimit   Int?
//   downloadCount   Int?
//   createdAt       DateTime?
// }

// An upload is just a file or other piece of content that resides in storage.
// It belongs to a User.
// A user can share anything they've uploaded
// Are users aware of their Uploads?
// Aren't they only looking at Items in a folder?
// are Uploads just the "backing data" for an Item?
// (allowing them to create ItemLinks from existing items)
// where ItemLinks have expirations and throwaway containers
model Upload {
  id        String        @unique
  size      Int
  ownerId   Int
  owner     User          @relation(fields: [ownerId], references: [id])
  items     Item[]        // A single Upload may back multiple Items
  type      String        // mime type
  createdAt DateTime?
}
